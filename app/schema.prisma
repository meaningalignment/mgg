datasource db {
  provider          = "postgres"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING_SHADOW") // used for migrations
  extensions        = [pgvector(map: "vector")] // Add the pgvector extension
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] // Enable the postgresqlExtensions. Currently in preview
}

//
// BELOW SHOULD MATCH ../app/schema.prisma
// 

// A values card, tied to a generation run.
model ValuesCard {
  id              Int                            @id @default(autoincrement())
  title           String
  policies        String[]
  createdAt       DateTime                       @default(now())
  updatedAt       DateTime                       @updatedAt
  generation      Int
  embedding       Unsupported("vector(1536)")?
  GraphGeneration GraphGeneration?               @relation(fields: [generation], references: [id], onDelete: Cascade)
  From            Edge[]                         @relation("from")
  To              Edge[]                         @relation("to")
  Deduplication   ValuesCardToDeduplicatedCard[]
}

// An edge between two cards, tied to a generation run.
model Edge {
  fromId                 Int
  toId                   Int
  context                String
  metadata               Json?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  generation             Int
  Context                Context                  @relation(fields: [context], references: [id], onDelete: Cascade)
  GraphGeneration        GraphGeneration?         @relation(fields: [generation], references: [id], onDelete: Cascade)
  From                   ValuesCard               @relation("from", fields: [fromId], references: [id], onDelete: Cascade)
  To                     ValuesCard               @relation("to", fields: [toId], references: [id], onDelete: Cascade)
  EdgeToDeduplicatedEdge EdgeToDeduplicatedEdge[]

  @@id([fromId, toId, context])
}

// A context for an edge, tied to a generation run.
model Context {
  id                           String                         @id
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  generation                   Int?
  embedding                    Unsupported("vector(1536)")?
  Edge                         Edge[]
  GraphGeneration              GraphGeneration?               @relation(fields: [generation], references: [id], onDelete: Cascade)
  ContextToDeduplicatedContext ContextToDeduplicatedContext[]
}

// A deduplicated card, tied to a deduplication run.
model DeduplicatedCard {
  id                      Int                            @id @default(autoincrement())
  title                   String
  policies                String[]
  createdAt               DateTime                       @default(now())
  updatedAt               DateTime                       @updatedAt
  generation              Int
  embedding               Unsupported("vector(1536)")?
  DeduplicationGeneration DeduplicationGeneration        @relation(fields: [generation], references: [id])
  From                    DeduplicatedEdge[]             @relation("from")
  To                      DeduplicatedEdge[]             @relation("to")
  Deduplication           ValuesCardToDeduplicatedCard[]
}

// A deduplicated edge, tied to a deduplication run.
model DeduplicatedEdge {
  fromId                 Int
  toId                   Int
  context                String
  metadata               Json?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  generation             Int
  contextModel           DeduplicatedContext      @relation(fields: [context], references: [id])
  deduplication          DeduplicationGeneration  @relation(fields: [generation], references: [id])
  From                   DeduplicatedCard         @relation("from", fields: [fromId], references: [id])
  To                     DeduplicatedCard         @relation("to", fields: [toId], references: [id])
  EdgeToDeduplicatedEdge EdgeToDeduplicatedEdge[]

  @@id([fromId, toId, context])
}

// A deduplicated context, tied to a deduplication run.
model DeduplicatedContext {
  id                           String                         @id
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  generation                   Int
  embedding                    Unsupported("vector(1536)")?
  DeduplicatedEdge             DeduplicatedEdge[]
  DeduplicationGeneration      DeduplicationGeneration        @relation(fields: [generation], references: [id])
  ContextToDeduplicatedContext ContextToDeduplicatedContext[]
}

// A graph generation run.
model GraphGeneration {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  gitCommitHash String
  state         ProcessState @default(IN_PROGRESS)
  ValuesCard    ValuesCard[]
  Context       Context[]
  Edge          Edge[]
}

// A deduplication generation run. 
//
// To get the latest & greatest, filter cards, edges and contexts on latest finished run.
model DeduplicationGeneration {
  id                           Int                            @id @default(autoincrement())
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  gitCommitHash                String
  state                        ProcessState                   @default(IN_PROGRESS)
  DeduplicatedContext          DeduplicatedContext[]
  DeduplicatedEdge             DeduplicatedEdge[]
  DeduplicatedCard             DeduplicatedCard[]
  ValuesCardToDeduplicatedCard ValuesCardToDeduplicatedCard[]
  ContextToDeduplicatedContext ContextToDeduplicatedContext[]
  EdgeToDeduplicatedEdge       EdgeToDeduplicatedEdge[]
}

// Linking table for values card to deduplicated version, tied to a deduplication run.
model ValuesCardToDeduplicatedCard {
  valuesCardId            Int
  deduplicatedCardId      Int
  generation              Int
  DeduplicationGeneration DeduplicationGeneration @relation(fields: [generation], references: [id])
  ValuesCard              ValuesCard              @relation(fields: [valuesCardId], references: [id])
  DeduplicatedCard        DeduplicatedCard        @relation(fields: [deduplicatedCardId], references: [id])

  @@id([valuesCardId, deduplicatedCardId, generation])
}

// Linking table for context to deduplicated context, tied to a deduplication run.
model ContextToDeduplicatedContext {
  contextId               String
  deduplicatedContextId   String
  generation              Int
  DeduplicationGeneration DeduplicationGeneration @relation(fields: [generation], references: [id])
  Context                 Context                 @relation(fields: [contextId], references: [id])
  DeduplicatedContext     DeduplicatedContext     @relation(fields: [deduplicatedContextId], references: [id])

  @@id([contextId, deduplicatedContextId, generation])
}

// Linking table for edge to deduplicated edge, tied to a deduplication run.
model EdgeToDeduplicatedEdge {
  fromId                  Int
  toId                    Int
  deduplicatedFromId      Int
  deduplicatedToId        Int
  context                 String
  deduplicatedContext     String
  generation              Int
  DeduplicationGeneration DeduplicationGeneration @relation(fields: [generation], references: [id])
  Edge                    Edge                    @relation(fields: [fromId, toId, context], references: [fromId, toId, context])
  DeduplicatedEdge        DeduplicatedEdge        @relation(fields: [deduplicatedFromId, deduplicatedToId, deduplicatedContext], references: [fromId, toId, context])

  @@id([fromId, toId, context, deduplicatedFromId, deduplicatedToId, deduplicatedContext, generation])
}

// The state of a deduplication or generation process. Always IN_PROGRESS when created.
enum ProcessState {
  IN_PROGRESS
  FINISHED
  ERROR
}
